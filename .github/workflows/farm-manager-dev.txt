name: Farm Manager CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: farm_manager_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Node and dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      # Run NestJS tests against Postgres + Redis
      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/farm_manager_test
          REDIS_URL: redis://localhost:6379
        run: npm run test

      # Setup Docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (linux/arm64)
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --tag ${{ secrets.DOCKER_USERNAME }}/farm-manager:latest \
            --push \
            .

      # Deploy on EC2
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/farm-manager || mkdir ~/farm-manager && cd ~/farm-manager
            # Cleanup old files
            docker system prune -af
            docker volume prune -f
            # Write .env file from GitHub secret
            echo "${{ secrets.ENV_FILE }}" > .env
            # Copy docker-compose.yml from repo
            cat > docker-compose.yml << 'EOF'
            $(cat docker-compose.yml)
            EOF
            # Start containers
            docker-compose up -d --remove-orphans
